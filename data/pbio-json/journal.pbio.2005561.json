{
  "schema": "https://data.sciveyor.com/schema",
  "version": 5,
  "id": "doi:10.1371/journal.pbio.2005561",
  "doi": "10.1371/journal.pbio.2005561",
  "externalIds": [
    "pii:pbio.2005561",
    "pmid:30485260",
    "pmcid:PMC6287879"
  ],
  "license": "This is an open access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.",
  "licenseUrl": "http://creativecommons.org/licenses/by/4.0/",
  "dataSource": "Public Library of Science",
  "dataSourceUrl": "https://data.sciveyor.com/source/plos",
  "dataSourceVersion": 1,
  "type": "article",
  "title": "Building a local community of practice in scientific programming for life scientists",
  "authors": [
    {
      "name": "Sarah L. R. Stevens",
      "first": "Sarah L. R.",
      "last": "Stevens",
      "affiliation": "Department of Bacteriology, University of Wisconsin–Madison, Madison, Wisconsin, United States of America"
    },
    {
      "name": "Mateusz Kuzak",
      "first": "Mateusz",
      "last": "Kuzak",
      "affiliation": "Dutch Techcentre for Life Sciences, Utrecht, Netherlands"
    },
    {
      "name": "Carlos Martinez",
      "first": "Carlos",
      "last": "Martinez",
      "affiliation": "Netherlands eScience Center, Amsterdam, Netherlands"
    },
    {
      "name": "Aurelia Moser",
      "first": "Aurelia",
      "last": "Moser",
      "affiliation": "Mozilla Foundation, Mountain View, California, United States of America"
    },
    {
      "name": "Petra Bleeker",
      "first": "Petra",
      "last": "Bleeker",
      "affiliation": "Department of Plant Physiology, Swammerdam Institute for Life Sciences, University of Amsterdam, Amsterdam, Netherlands"
    },
    {
      "name": "Marc Galland",
      "first": "Marc",
      "last": "Galland",
      "affiliation": "Department of Plant Physiology, Swammerdam Institute for Life Sciences, University of Amsterdam, Amsterdam, Netherlands"
    }
  ],
  "journal": "PLOS Biology",
  "date": "2018-11-28",
  "volume": "16",
  "number": "11",
  "pages": "e2005561",
  "tags": [
    "Bioinformatics",
    "Biologists",
    "Careers in research",
    "Cognitive psychology",
    "Cognitive science",
    "Community ecology",
    "Database and informatics methods",
    "Discipline-v3/Bioinformatics",
    "Discipline-v3/Biologists",
    "Discipline-v3/Biology and life sciences",
    "Discipline-v3/Careers in research",
    "Discipline-v3/Cognitive psychology",
    "Discipline-v3/Cognitive science",
    "Discipline-v3/Community ecology",
    "Discipline-v3/Database and informatics methods",
    "Discipline-v3/Ecology",
    "Discipline-v3/Ecology and environmental sciences",
    "Discipline-v3/Education",
    "Discipline-v3/Human learning",
    "Discipline-v3/Instructors",
    "Discipline-v3/Learning",
    "Discipline-v3/Learning and memory",
    "Discipline-v3/Neuroscience",
    "Discipline-v3/People and places",
    "Discipline-v3/Population groupings",
    "Discipline-v3/Professions",
    "Discipline-v3/Psychology",
    "Discipline-v3/Reproducibility",
    "Discipline-v3/Research and analysis methods",
    "Discipline-v3/Research assessment",
    "Discipline-v3/Science and technology workforce",
    "Discipline-v3/Science policy",
    "Discipline-v3/Scientists",
    "Discipline-v3/Social sciences",
    "Discipline-v3/Sociology",
    "Discipline-v3/Workshops",
    "Ecology",
    "Education",
    "Human learning",
    "Instructors",
    "Learning",
    "Learning and memory",
    "Neuroscience",
    "Population groupings",
    "Professions",
    "Psychology",
    "Reproducibility",
    "Research assessment",
    "Science and technology workforce",
    "Scientists",
    "Sociology",
    "Type/Community Page",
    "Workshops"
  ],
  "abstract": "In this paper, we describe why and how to build a local community of practice in scientific programming for life scientists who use computers and programming in their research. A community of practice is a small group of scientists who meet regularly to help each other and promote good practices in scientific programming. While most life scientists are well trained in the laboratory to conduct experiments, good practices with (big) data sets and their analysis are often missing. We propose a model on how to build such a community of practice at a local academic institution, present two real-life examples, and introduce challenges and implemented solutions. We believe that the current data deluge that life scientists face can benefit from the implementation of these small communities. Good practices spread among experimental scientists will foster open, transparent, and sound scientific results beneficial to society.",
  "fullText": "Introduction\n\nLife sciences is becoming a data-driven field\n\nIn the last 10 years, since the advent of the first next-generation sequencing (NGS) technologies, DNA and RNA sequencing costs have plunged to levels that make genome sequencing an affordable reality for every life scientist [1,2]. Yet the vast majority of wet lab biologists need tailor-made, practical training to learn scientific programming and data analysis [3–6, 10, 11]. Current efforts in bioinformatics and data science training for life scientists have been initiated worldwide to cope with these training demands [7–11].\n\nGood practices in scientific programming are needed to increase research reproducibility\n\nModern biology is facing reproducibility issues [12]. While evidence suggests that this might not be as bad as it sounds [13], there is clearly a need for increased reproducibility. For instance, out of 400 algorithms presented at two conferences, only 6% had their corresponding code published [14]. Thus, most research code remains a “black box” [15], although programming is a central tool in research [16]. Use of laboratory notebooks is widely taught in biology but not emphasized for coding. Both code documentation and better practices in data management are needed so anyone can redo or understand the analyses later on. Part of the solution lies in dedicated training to researchers to promote good programming practices [17]. One of the recent relevant initiatives is the Findable, Accessible, Interoperable, and Reusable (FAIR) principles initiative, which provides guidelines to boost reproducibility and reuse of data sets [18]. Therefore, the long-term goal of any programming scientist should be to steward good practices in code-intensive research by promoting open science, reproducible research, and sustainable software development.\n\nPart of the solution: Building a local community of practice\n\nTraining workshops in scientific programming are often offered as one-time courses, but researchers would benefit from more permanent support. Fueled by Etienne Wenger's idea that learning is usually a social activity [19,20], we propose to build a local community of practice in scientific programming for life scientists. This community fulfills the three requirements of Wenger's definition: it has a specific domain, i.e., bioinformatics and data science; its members engage in common activities, e.g., training events; and they are practitioners, i.e., researchers currently engaged in research that involves scientific programming. Community building and organization is a field in itself that has been considerably reviewed [21–26]. Requirements include a few motivated leaders and a safe environment in which participants can experiment with their new knowledge [23]. As stated by Wenger and Snyder [27], communities of practice “help to solve problems quickly,” “transfer best practices,” and “develop professional skills.” While short-term immediate issues (“help me now to debug my code”) can be solved, the community also has the capacity to steward solutions for long-term data-related problems (“how do I comply with the FAIR guidelines?”) and can therefore help to solve reproducibility issues. Communities of practice can also foster the adoption of good practices [28] since by coworking with their peers, scientists are probably more likely to compare their methods and embrace best practices.\n\nThis paper will explicitly describe why and how to build a local community of practice in scientific programming. We propose a model of how to build such a community that we exemplify in two case studies. Finally, we discuss the challenges and possible solutions that we encountered when building these communities. Overall, we believe that building these local communities of practice in scientific programming will support and speed up scientific research, spread good practices, and ultimately help to tackle the data deluge in the life sciences.\n\nWhy do we need to build up local community of practice in scientific programming?\n\nIsolation\n\nWet lab biologists are increasingly being asked by their supervisors to analyze a set of pre-existing data in labs where their peers have little to no coding experience. Without access to experienced bioinformaticians, they can lead to a sentiment of isolation deleterious to their work.\n\nSelf-learning and adoption of bad practices\n\nIn such a scenario, most researchers tend to invent their own solution, sometimes reinventing the wheel. While wasting time, it also leads to the adoption of bad practices (e.g., lack of version control) and irreproducible results. While some compiled easy-to-use software, such as samtools [29], can help to get started, typically researchers need to build their own collection of tools and scripts. For instance, version control is essential: we believe that using git (https://git-scm.com) and github (https://github.com), should be considered a mandatory, good practice just like accurate pipetting in the molecular lab.\n\nApprehension\n\nResearchers may also fear the breadth of knowledge they need before achieving anything, which may lead to &quot;impostor syndrome:&quot; the researcher feels like he will be exposed as a fraud, and someone more competent will unveil his lack of knowledge of coding and bioinformatics. This also inhibits continued learning since the researcher is then afraid to ask for help.\n\nThe issue of how to get started\n\nLearning to code in a research team is akin to an apprenticeship. The “apprentice” will benefit from the experience and knowledge of more experienced team members. For instance, a researcher working on RNA-Seq for several years will be able to demonstrate the use of basic quality check (QC) tools, short-read aligners, differential gene expression calls, etc. Yet many research teams do not have an experienced bioinformatician on staff. Even in the best case for which an expert bioinformatician is available, it may be problematic for beginners to get all their knowledge in one field from one person. Instead, we propose building a community to spread good practices and help to connect novices and experts. Ideally, a novice should make progress toward increased skill levels, as illustrated in Fig 1 [30].\n\nHow do we build local communities in scientific programming: A model inspired by experience\n\nHere, we propose a three-stage working model (Fig 2) to create a local community of practice in scientific programming composed of life scientists at any given institution without any prior community structure.\n\nIn stage 1, we form the &quot;primer&quot; of a local community of practice by first running basic programming workshops organized by local community leads (&quot;champions&quot;) and then coupling them to the formation of a study group. Champions do not necessarily have to be experts themselves. In our experience, Carpentries workshops work well since they provide training aimed at researchers and possess a long history of teaching programming to scientists [8, 17]. These programming workshops serve as a starting point for both learning and gathering researchers together in one room where people are actively paired and invited to learn about each other. Often, beginners and bioinformaticians who might have never met despite working at the same institution will connect and engage afterwards.\n\nWhen absolute beginners join these workshops, they become &quot;advanced beginners&quot; once they gain some programming notions. During their daily work, &quot;advanced beginners&quot; often lack the support needed to face programming issues that they may encounter frequently. Community &quot;champions&quot; and &quot;advanced beginners&quot; can &quot;seed&quot; a local community of practice (Fig 1), which meets regularly to continue practicing the skills they learned at these programming workshops. Therefore, a local coworking group that follows a well-documented handbook such as that of the Mozilla Study Group should be set up with a regular meeting schedule. Other forms of coworking groups can be used, but we believe that Mozilla Study Groups offer the best existing model.\n\nIn stage 2, the study group becomes a regular practice for advanced beginners for which they progressively become competent practitioners (Fig 1). This study group also welcomes new novice members as they join the research institution or as they hear about the existence of the group. The community leads will provide guidance, specific lessons, and assistance during hands-on practicals, which will nurture the community and raise the community global scientific programming level. Again, leading sessions is not restricted to champions, and any motivated individual can lead. Also, champions do not necessarily have to be experts themselves but can instead invite experts and facilitate discussions. At the end of this stage, most advanced beginners will likely have become competent practitioners.\n\nIn stage 3, a subset of the competent practitioners from the local community will become community leads (&quot;champions&quot;, Fig 1) by increasing their teaching and facilitating skills and recognizing the skill level of their audience (Fig 1). These competencies can be attained by becoming a Carpentries instructor, which requires attending an instructor training event; these sessions can be organized by initial community champions since they usually have both the network and know-how to set up these specific workshops. Once again, it is not mandatory to rely on the Carpentries Foundation organization as long as competent practitioners get a deeper knowledge of teaching techniques for which they improve their own skills. However, we now have a good perspective on the long-term experience and success of the Carpentries Foundation with over 500 workshops organized and 16,000 attendees present [8, 9].\n\nCase studies\n\nThe Amsterdam Science Park example\n\nOn the 17th of October 2016, Mateusz Kuzak, Carlos Martinez, and Marc Galland organized a two-day Software Carpentry workshop in Amsterdam to teach basic programming skills (Shell, version control, and Python) to a group of 26 wet lab biologists. This started a dialog about the skills life scientists need in their daily work. After a few months, a subset of the workshop attendees made progress, but most of them did not continue to program either because (i) they did not need it at the time, (ii) they felt isolated and could not get support from their peers, or (iii) they did not make time for practice alongside regular lab work. Thus, a regular meetup group was needed so that researchers with different programming levels could help and support each other. Hence, on the 7th of March 2017, we started up the Amsterdam Science Park Study Group following the Mozilla Study Group guidelines. We quickly decided to stick to the guidelines suggested by the Mozilla Science Lab. Originally, we started with one scientist from the University of Amsterdam (Marc Galland) and two engineers in software engineering (Mateusz Kuzak and Carlos Martinez). But after five months, we decided to gather more scientists to build up a community with expertise in R and Python programming as well as from different scientific fields (genomics, statistics, and ecology). Most study group members came from two different institutes, which helped the group to be more multidisciplinary. At the same time, a proper website (www.scienceparkstudygroup.info) was set up to streamline communication and advertise events.\n\nThe University of Wisconsin–Madison example\n\nAt the University of Wisconsin–Madison, Sarah Stevens started a community of practice in the fall of 2014 centered around Computational Biology, Ecology, and Evolution (&quot;ComBEE&quot;). It was started as a place to help other graduate students learn scientific coding, such as Python, and to discuss scientific issues in computational biology, such as metagenomics. The main ComBEE group meets once a month to discuss computational biology in ecology and evolution. Under the ComBEE umbrella, there are also two spin-off study groups, which alternate each week so that attendees can focus on their favorite programming language. Later in ComBEE's development, Sarah transitioned to being a part of the Mozilla Study Group community, taking advantage of the existing resources to, for instance, build their web page (https://combee-uw-madison.github.io/studyGroup/). Early in the development of ComBEE, the facilitating of the language-specific study groups was delegated on a semester by semester basis; this helped to keep more members involved in the growth and maturation of the local community. One of the early members of ComBEE was a life sciences graduate student who had recently attended a Software Carpentry Workshop and had no other experience doing bioinformatics. He wanted to continue his development and was working on a very computationally intensive project. He has since run the Python Study Group for several semesters and is now an exceedingly competent computational biologist. He continued to contribute back to the group through the end of his PhD, lending his expertise and experience to the latest study group discussions. The ComBEE study group is now more than three years old and acts as a stable resource center for new graduate students and employees.\n\nRoom for improvement: Challenges and solutions learned from experience\n\nBelow, we describe essential components of a successful community of practice based on both literature [22–24, 26] and experience.\n\nGather a core group of motivated individuals\n\nOne of the first tasks for setting up a community of practice is to gather a team of motivated individuals that will act as leaders of the community [23, 24]. To recruit these leaders, one can:\n\nRely on existing communities, e.g., &quot;R lunch group,&quot; since these informal groups are often lead by motivated individuals.\n\nRecruit scientists that share similar values, such as advocating for Open Science, having a collaborative attitude, showing tolerance toward cultural and scientific differences, and being supportive of beginners and lifelong learners in general.\n\nSearch within institutions with a reasonably big size, e.g., universities.\n\nKeeping participants coming and engaging the community\n\nFor someone who is part of the “core team” of a study group, the challenge is to attract experts or new members and ensure that they regularly participate in activities (lessons, coworking sessions, and organizational meetings) [23, 24, 26]. Among possible incentives to keep new members and leaders engaging, we suggest to tell them that they can:\n\nReach out to a wider audience by participating to lessons, workshops, etc.\n\nImprove their teaching skills and eventually become a Carpentries instructor.\n\nSolve basic issues for several beginners simultaneously through workshops.\n\nLead the community for a semester and thereby develop their leadership.\n\nTailor topics to their interests.\n\nIncrease their group management, communication, and networking capacities.\n\nHow to deal with the ever-ongoing turnover at academic institutions\n\nThe constant turnover of students and temporary staff remains a continual challenge. Keeping the local community ongoing requires a critical mass both for the core team and for the audience. Yet the high turnover of students and staff also has its positive sides: a dynamic environment brings in new people eager to learn and with relevant knowledge to share in the group. We recommend using the turnover of people to your advantage by making an effort to recruit both new members and champions. Some practical solutions include:\n\nAdvertising the community through its leaders; people bring people through word of mouth\n\nInvite permanent staff to sustain the community development.\n\nUse the turnover to your advantage; quickly invite newcomers to join the community.\n\nDealing with the impostor syndrome\n\nCreating a safe learning environment is one of the requirements for a thriving community of practice [23]. To encourage beginners and newcomers to participate and feel welcome, we recommend to:\n\nEnforce a Code of Conduct following an existing example (e.g., the Carpentries Code of Conduct) to set up expectations and promote a welcoming atmosphere.\n\nPromote all questions and forbid surprise reactions to very basic questions (&quot;What is the Shell?&quot; and &quot;Oh, you don't know?&quot;).\n\nBan in-depth technical discussions that alienate novices.\n\nCommunity leadership and institutional support\n\nAn effort should be made to assign clear and specific roles to administration members of the local community based on their expertise and interest. Another challenge is to secure funding and people’s support from the local institution [26, 27]. To do so, we advise to:\n\nDelegate as much as possible to promote leadership; appoint someone to lead the community for a semester, for instance.\n\nGet support from the local institution as soon as possible in terms of money, time, and/or staff.\n\nCommunity composition\n\nAnother important aspect to consider is the composition of the community. We have identified the following types of community members as common components of the community:\n\nAbsolute and advanced beginners: these are people with the most basic level of knowledge. For them, the motivation to be part of a community is obvious: they want to learn programming and often need rapid assistance to complete their research.\n\nCompetent practitioners: these are people who are already competent in a particular bioinformatics/data science domain. For them, contributing to the community is a good way to reinforce their set of talents. Often, competent practitioners make excellent teachers, as they are able to easily relate to the beginner state of mind. In turn, this increases their learning and teaching skills.\n\nExperts: these are people with the highest experience level on a particular skill. Experts usually reinforce their knowledge by “going back to basics:” it is useful for them to understand what are the usual gotchas for novices. Building a local community of practice provides experts with an opportunity to help novices in a more structural way instead of helping each one individually.\n\nPractical considerations\n\nIn our experience, we have found the following practical tips to be useful:\n\nGather a critical mass of at least 10 recurrent community members that regularly attend meetings and community sessions.\n\nSend meeting notifications in advance and frequently enough; schedule the meetings well in advance and keep a consistent day, time, and place to help people remember them.\n\nHave weekly or fortnightly meetings so that it is a compromise between researchers' schedules and community development.\n\nOrganize meetings in a relatively quiet environment with a good Internet connection. Places such as a campus café outside of busy hours or a small conference room can be good places to start and help to keep an informal and welcoming atmosphere.\n\nConclusion\n\nWe hope that our model and the lessons learned from our experience described in this paper will save time and effort for future community leads when they start their own local community of practice in scientific programming. Building such a community is far from trivial, and we, as scientists, are perhaps not the most proficient on community building and organization [21–25]. Since &quot;progress will not happen by itself&quot; [17], a community of practice in scientific programming will bring many benefits to its members and to their institution; it fosters the development of new skills for its members, breaks down “mental borders” between departments, networks domain experts at a local site, and helps to retain knowledge that would otherwise be lost with the departure of temporary staff and students.\n\nThe convergence of the “big data” avalanche in biology and new FAIR requirements for data management [18] makes it more and more important for wet lab researchers to conduct good scientific programming, efficient data analysis, and proper research data management. Eventually, these local communities of practice in scientific programming should speed up code-intensive analyses, promote open science, research reproducibility, and spread good practices at a given institution."
}